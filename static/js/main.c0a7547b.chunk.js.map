{"version":3,"sources":["Gomoku.js","App.js","index.js"],"names":["OutterWrapper","styled","div","ReloadButton","button","Row","BlackPiece","WhitePiece","Board","Block","row","column","children","className","BoardBlocks","map","boardRow","index","rowNumber","value","colorOfThisBlock","handleReload","window","location","reload","Gomoku","handleClick","id","onClick","e","target","steps","currentHandIsBlack","gameIsOver","App","useState","Array","fill","setMap","countPieces","currentRow","currentColumn","directionRow","directionColumn","count","newRow","newColumn","useEffect","length","color","isGameOver","alert","document","title","block","getAttribute","push","Number","newValue","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c0a7547b.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable react/prop-types */\r\n/* eslint-disable react/react-in-jsx-scope */\r\n/* eslint-disable react/jsx-filename-extension */\r\n/* eslint-disable no-alert */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable no-shadow */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable import/no-unresolved */\r\nimport styled from 'styled-components';\r\n\r\nconst OutterWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst ReloadButton = styled.button`\r\nmargin: 20px 0;\r\n`;\r\n\r\nconst Row = styled.div``;\r\n\r\nconst BlackPiece = styled.div`\r\n  width: 25px;\r\n  height: 25px;\r\n  border-radius: 50%;\r\n  background-color: black;\r\n  box-sizing: border-box;\r\n  box-shadow: 1px 1px 1px 1px rgba(50, 50, 50, 0.3);\r\n`;\r\n\r\nconst WhitePiece = styled(BlackPiece)`\r\n  background-color: white;\r\n`;\r\n\r\nconst Board = styled.div``;\r\n\r\nfunction Block({ row, column, children }) {\r\n  return (\r\n    <div\r\n      key={column}\r\n      row={row}\r\n      column={column}\r\n      className=\"square\"\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction BoardBlocks({ map }) {\r\n  return (\r\n    // 先取出 row\r\n    map.map((boardRow, index) => {\r\n      const rowNumber = index;\r\n      return (\r\n        <Row key={index} row={index}>\r\n          {/* 取出每個 block 裡面的值 */}\r\n          {\r\n            boardRow.map((value, index) => {\r\n              let colorOfThisBlock = '';\r\n              if (value && value === '0') colorOfThisBlock = <BlackPiece />;\r\n              if (value && value === '1') colorOfThisBlock = <WhitePiece />;\r\n\r\n              return (\r\n                <Block\r\n                  key={index}\r\n                  row={rowNumber}\r\n                  column={index}\r\n                >\r\n                  {colorOfThisBlock}\r\n                </Block>\r\n              );\r\n            })\r\n          }\r\n        </Row>\r\n      );\r\n    })\r\n  );\r\n}\r\n\r\nfunction handleReload() {\r\n  window.location.reload();\r\n}\r\n\r\nexport default function Gomoku({ map, handleClick }) {\r\n  function handleBlockClick(e) {\r\n    handleClick(e.target);\r\n  }\r\n\r\n  return (\r\n    <OutterWrapper>\r\n      <h1>React Gomoku</h1>\r\n      <Board id=\"board\" onClick={handleBlockClick}>\r\n        <BoardBlocks map={map} />\r\n      </Board>\r\n      <ReloadButton onClick={handleReload}>再玩一次</ReloadButton>\r\n    </OutterWrapper>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport Gomoku from './Gomoku';\r\n\r\nconst steps = []\r\n\r\nlet currentHandIsBlack = true\r\nlet gameIsOver = false\r\n\r\nexport default function App() {\r\n  const [map, setMap] = useState(Array(19).fill(Array(19).fill(null)))\r\n\r\n  // 此判斷函式參考自 Hugh 學長 與同學 Nicolas 的作業\r\n  function countPieces(currentRow, currentColumn, directionRow, directionColumn) {\r\n    let count = 0\r\n\r\n    while (count < 4) {\r\n      let newRow = currentRow + directionRow\r\n      let newColumn = currentColumn + directionColumn\r\n\r\n      // 如果超出棋盤就終止\r\n      if (\r\n        newRow < 0 || newRow > 18 ||\r\n        newColumn < 0 || newColumn > 18) {\r\n        break;\r\n      }\r\n\r\n      // 目標格有棋子且與起點格棋子相同 => count 加 1\r\n      if (map[newRow][newColumn] !== null && map[newRow][newColumn] === map[currentRow][currentColumn]) {\r\n        count += 1\r\n        // 設定下一個 loop 的起點\r\n        currentRow = newRow\r\n        currentColumn = newColumn\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return count\r\n  }\r\n\r\n  const isGameOver = (steps) => {\r\n    if (steps.length === 0) return;\r\n    const [row, column] = steps[steps.length - 1]\r\n\r\n    if (\r\n      countPieces(row, column, 1, 0) + countPieces(row, column, -1, 0) >= 4 ||\r\n      countPieces(row, column, 0, 1) + countPieces(row, column, 0, -1) >= 4 ||\r\n      countPieces(row, column, 1, -1) + countPieces(row, column, -1, 1) >= 4 ||\r\n      countPieces(row, column, -1, -1) + countPieces(row, column, 1, 1) >= 4\r\n    ) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const handleClick = (block) => {\r\n    if (gameIsOver) return;\r\n    const [row, column] = [block.getAttribute('row'), block.getAttribute('column')]\r\n\r\n    // 設定\r\n    if (row === null || column === null || map[row][column]) return;\r\n    steps.push([Number(row), Number(column)])\r\n\r\n    setMap(map.map((boardRow, index) => {\r\n      if (index !== Number(row)) return boardRow;\r\n\r\n      // 找到要更新的 row, 用 map 回傳一個陣列\r\n      return boardRow.map((value, index) => {\r\n        if (value) return value\r\n        if (index === Number(column)) {\r\n          const newValue = currentHandIsBlack ? '0' : '1'\r\n          currentHandIsBlack = !currentHandIsBlack\r\n          return newValue\r\n        } else {\r\n          return value\r\n        }\r\n      })\r\n    }))\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (steps.length === 0) return\r\n\r\n    let color = !currentHandIsBlack ? \"Black\" : \"White\";\r\n    if (isGameOver(steps)) {\r\n      gameIsOver = true;\r\n      alert(`${color} is winner`)\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    document.title = 'React Gomoku'\r\n  }, [])\r\n\r\n  return (\r\n    <Gomoku map={map} handleClick={handleClick} />\r\n  )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}