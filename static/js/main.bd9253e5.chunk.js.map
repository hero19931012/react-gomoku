{"version":3,"sources":["Components.js","App.js","index.js"],"names":["ReloadButton","styled","button","Button","row","column","children","className","StyledRow","div","BoardWrapper","BlackPiece","WhitePiece","Board","map","handleClick","next","onClick","e","target","window","location","reload","boardRow","index","rowNumber","value","steps","currentHandIsBlack","gameIsOver","App","useState","Array","fill","setMap","countPieces","currentRow","currentColumn","directionRow","directionColumn","count","newRow","newColumn","console","log","useEffect","length","color","isGameOver","alert","block","getAttribute","push","Number","newValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd9253e5.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst ReloadButton = styled.button`\r\nmargin: 20px 0;\r\n`\r\n\r\nconst Button = ({ row, column, children }) => {\r\n  return (\r\n    <div key={column} row={row} column={column} className=\"square\" >{children}</div>\r\n  );\r\n}\r\n\r\nconst StyledRow = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst BoardWrapper = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nconst BlackPiece = styled.div`\r\n  width: 25px;\r\n  height: 25px;\r\n  border-radius: 50%;\r\n  background-color: black;\r\n  // border: black solid 1px;\r\n  box-sizing: border-box;\r\n  box-shadow: 1px 1px 1px 1px rgba(50, 50, 50, 0.3);\r\n`\r\n\r\nconst WhitePiece = styled(BlackPiece)`\r\n  background-color: white\r\n`\r\n\r\nexport default function Board({ map, handleClick, next }) {\r\n  const handleBlockClick = (e) => {\r\n    handleClick(e.target)\r\n  }\r\n\r\n  return <BoardWrapper onClick={handleBlockClick}>\r\n    <ReloadButton onClick={() => {\r\n      window.location.reload()\r\n    }}>再玩一次</ReloadButton>\r\n    {\r\n      map.map((boardRow, index) => {\r\n        let rowNumber = index\r\n        return <StyledRow key={index} row={index} >\r\n          {\r\n            boardRow.map((value, index) => {\r\n              return <Button key={index} row={rowNumber} column={index} >{value === null ? null : value === '0' ? <BlackPiece /> : <WhitePiece />} </Button>\r\n            })\r\n          }\r\n        </ StyledRow>\r\n      })\r\n    }\r\n  </BoardWrapper>\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport Board from './Components';\r\n\r\nconst steps = []\r\n\r\nlet currentHandIsBlack = true\r\nlet gameIsOver = false\r\n\r\nexport default function App() {\r\n  const [map, setMap] = useState(Array(19).fill(Array(19).fill(null)))\r\n\r\n  // 此判斷函式參考自 Hugh 學長 與同學 Nicolas 的作業\r\n  function countPieces(currentRow, currentColumn, directionRow, directionColumn) {\r\n    let count = 0\r\n\r\n    while (count < 4) {\r\n      let newRow = currentRow + directionRow\r\n      let newColumn = currentColumn + directionColumn\r\n\r\n      // 如果超出棋盤就終止\r\n      if (\r\n        newRow < 0 || newRow > 18 ||\r\n        newColumn < 0 || newColumn > 18) {\r\n        break;\r\n      }\r\n\r\n      // 目標格有棋子且與起點格棋子相同 => count 加 1\r\n      if (map[newRow][newColumn] !== null && map[newRow][newColumn] === map[currentRow][currentColumn]) {\r\n        count += 1\r\n        // 設定下一個 loop 的起點\r\n        currentRow = newRow\r\n        currentColumn = newColumn\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    console.log(!currentHandIsBlack ? \"black\" : \"white\", currentRow, currentColumn, directionRow, directionColumn, count);\r\n    return count\r\n  }\r\n\r\n  const isGameOver = (steps, color) => {\r\n    if (steps.length === 0) return;\r\n    const [row, column] = steps[steps.length - 1]\r\n    console.log(\"最後一手\", color, row, column);\r\n\r\n    if (\r\n      countPieces(row, column, 1, 0) + countPieces(row, column, -1, 0) >= 4 ||\r\n      countPieces(row, column, 0, 1) + countPieces(row, column, 0, -1) >= 4 ||\r\n      countPieces(row, column, 1, -1) + countPieces(row, column, -1, 1) >= 4 ||\r\n      countPieces(row, column, -1, -1) + countPieces(row, column, 1, 1) >= 4\r\n    ) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const handleClick = (block) => {\r\n    if (gameIsOver) return;\r\n    const [row, column] = [block.getAttribute('row'), block.getAttribute('column')]\r\n\r\n    if (row === null || column === null || map[row][column]) return;\r\n    steps.push([Number(row), Number(column)])\r\n\r\n    setMap(map.map((boardRow, index) => {\r\n      if (index !== Number(row)) return boardRow;\r\n      // 找到要更新的 row, 用 map 回傳一個陣列\r\n      return boardRow.map((value, index) => {\r\n        if (value) return value\r\n        if (index === Number(column)) {\r\n          const newValue = currentHandIsBlack ? '0' : '1'\r\n          currentHandIsBlack = !currentHandIsBlack\r\n          return newValue\r\n        } else {\r\n          return value\r\n        }\r\n      })\r\n    }))\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (steps.length === 0) return\r\n\r\n    let color = !currentHandIsBlack ? \"black\" : \"white\";\r\n    if (isGameOver(steps, color)) {\r\n      gameIsOver = true;\r\n      alert(`${color} is winner`)\r\n    }\r\n  })\r\n\r\n  return <Board map={map} handleClick={handleClick} next={currentHandIsBlack ? '0' : '0'} />\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\n\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}